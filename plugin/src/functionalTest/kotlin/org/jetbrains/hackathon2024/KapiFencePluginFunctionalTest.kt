/*
 * This source file was generated by the Gradle 'init' task
 */
package org.jetbrains.hackathon2024

import org.gradle.testkit.runner.BuildResult
import java.io.File
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import kotlin.test.Test
import kotlin.test.assertTrue
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.io.TempDir
import kotlin.test.assertEquals

class KapiFencePluginFunctionalTest {

    @field:TempDir
    lateinit var projectDir: File

    fun copyProjectTemplate(resourceDirectoryName: String, targetDirectory: File) {
        val projectResource =
            Thread.currentThread().contextClassLoader.getResource("projects/$resourceDirectoryName/")
                ?: error("Resource $resourceDirectoryName not found")
        val resourcePath =
            Paths.get(projectResource.toURI())
        println("Copying project template from $resourcePath to $targetDirectory")
        Files.walk(resourcePath).forEach { source ->
            val destination =
                targetDirectory.toPath().resolve(resourcePath.relativize(source).toString())
            Files.copy(source, destination, StandardCopyOption.REPLACE_EXISTING)
        }
        println("Copying finished")
    }

    fun build(project: String, vararg arguments: String, assertions: (BuildResult) -> Unit = {}) {
        copyProjectTemplate(project, projectDir)
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments(*arguments)
        runner.withProjectDir(projectDir)
        println("Running build with arguments: ${arguments.joinToString(" ")}")
        val result = runner.build()
        assertions(result)
    }

    fun buildAndFail(project: String, vararg arguments: String, assertions: BuildResult.() -> Unit = {}) {
        copyProjectTemplate(project, projectDir)
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments(*arguments)
        runner.withProjectDir(projectDir)
        println("Running build with arguments: ${arguments.joinToString(" ")}")
        val result = runner.buildAndFail()
        assertions(result)
    }

    @DisplayName("Works with Kotlin/JVM")
    @Test
    fun testKotlinJvm() {
        buildAndFail("kotlin-jvm", "compileKotlin") {
            assert(output.contains("'class AbstractSet<out E> : AbstractCollection<E>, Set<E>' is deprecated. The class is deprecated within the project by KapiFence plugin."))
            assertEquals(TaskOutcome.FAILED, task(":compileKotlin")?.outcome)
        }
    }

    @DisplayName("Works with Java")
    @Test
    fun testJava() {
        buildAndFail("java", "compileJava") {
            assert(output.contains("warning: [deprecation] kotlin.collections.AbstractSet in kotlin.collections has been deprecated"))
            assertEquals(TaskOutcome.FAILED, task(":compileJava")?.outcome)
        }
    }
}
